on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Service to Rollback'
        required: true
        default: 'files' 
        type: choice
        options:
        - analytics
        - biochem
        - chemspace
        - container
        - enzyme
        - files
        - instrument      
        - inventory
        - lcms
        - maldi
        - workflow
      rollback:
        description: 'True to enable rollback'
        required: true 
        type: boolean 
      hash:
        description: 'Hash to Rollback to! (7 characters)'
        required: true 
        type: string
      #tag:
      #  description: 'Tag for Docker (latest/dev/staging)'
      #  required: true
      #  default: 'devlatest' 
      #  type: choice
      #  options:
      #  - devlatest
      #  - staginglatest
      #  - latest
      environment_builtin:
        description: 'Environment to Rollback!'
        type: environment
        required: true 

jobs:
  ecs-list:
    runs-on: ubuntu-latest
    if:  ${{ github.event.inputs.rollback == 'true' }} 
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: main
#      - name: LIST CLUSTERS!
#        run: |
#          aws ecs list-clusters
#        env:
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          AWS_DEFAULT_REGION: 'us-east-1'
      - name: Run rollback script with vars
        run: |
          ls -lat
          chmod +x ./scripts/ecs-rollback.sh
          sh ./scripts/ecs-rollback.sh
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          environment: ${{ github.event.inputs.environment }}
          hash: ${{ github.event.inputs.hash }}
          tag: ${{ secrets.TAG }}

#  ecs-retag:
#    runs-on: ubuntu-latest
#    if:  ${{ github.event.inputs.environment_builtin == 'develop' }} 
#    steps:
#      - name: RETAG!
#        run: |
#          aws ecr batch-delete-image --repository-name graphql/${{ github.event.inputs.environment }} --image-ids imageTag=b895b56
#          echo "MY_MANIFEST=aws ecr batch-get-image --repository-name graphql/${{ github.event.inputs.environment }} --image-ids imageTag=${{ github.event.inputs.hash }} --region us-east-1 --query images[].imageManifest --output text" >> $GITHUB_ENV
#          #MY_MANIFEST=$(aws ecr batch-get-image --repository-name graphql/${{ github.event.inputs.environment }} --image-ids imageTag=${{ github.event.inputs.hash }} --region us-east-1 --query images[].imageManifest --output text)
#          echo "${{ env.MY_MANIFEST }}"
#          aws ecr put-image --repository-name graphql/${{ github.event.inputs.environment }} --image-tag latest --image-manifest "${{ env.MY_MANIFEST }}" --region us-east-1
#        env:
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          AWS_DEFAULT_REGION: 'us-east-1'
